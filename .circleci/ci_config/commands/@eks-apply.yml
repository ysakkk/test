redmine-apply:
  description: redmine apply to EKS
  steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - << pipeline.parameters.rhems-redmine-finger-print >>
    - kubernetes/install:
        kubectl-version: v1.23.6
    - develop-env-check
    - aws-eks/update-kubeconfig-with-authenticator:
        cluster-name: $CLUSTER_NAME
        aws-region: $AWS_DEFAULT_REGION
    - run:
        name: check
        command: |
          aws configure list
    - rj-package/install-kustomize
    - rj-package/install-skaffold:
        version: v1.35.1
    - run:
        name: apply namespace.yaml
        working_directory: .circleci/kubernetes/overlays
        command: |
          (cd ${CLIENT_NAME}
          kubectl apply -f namespace.yaml)
    - run:
        name: apply
        working_directory: .circleci/kubernetes
        command: |
          (
            cp ../skaffold.yml overlays/${CLIENT_NAME}
            cd overlays/${CLIENT_NAME}
            skaffold run
          )
    - run:
        name: confirm
        command: |
          kubectl get pod -n ${CLIENT_NAME}


base-system-apply:
  description: base-system apply to EKS
  steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - << pipeline.parameters.rhems-redmine-finger-print >>
    - kubernetes/install:
        kubectl-version: v1.23.6
    - develop-env-check
    - aws-eks/update-kubeconfig-with-authenticator:
        cluster-name: $CLUSTER_NAME
        aws-region: $AWS_DEFAULT_REGION
    - run:
        name: check aws configure
        command: |
          aws configure list
    - rj-package/install-kustomize
    - rj-package/install-skaffold:
        version: v1.35.1
    - run:
        name: apply namespace.yaml
        working_directory: .circleci/kubernetes/base-system
        command: |
          if [ -f ${APPLY_TARGET}/namespace.yaml ]; then
            cd ${APPLY_TARGET}
            kubectl apply -f namespace.yaml
          else
            echo "not run."
          fi
    - run:
        name: apply
        working_directory: .circleci/kubernetes/
        command: |
          if [[ "$CLIENT_NAME" == "develop" ]]; then
            _env="dev"
          else
            _env="prod"
          fi
          (
            cp ../skaffold.yml overlays/base-system/${APPLY_TARGET}/${_env}
            cd overlays/base-system/${APPLY_TARGET}/${_env}
            skaffold run
          )

blue-deploy-apply:
  description: blue-deploy apply to EKS
  steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - << pipeline.parameters.rhems-redmine-finger-print >>
    - kubernetes/install:
        kubectl-version: v1.23.6
    - develop-env-check
    - aws-eks/update-kubeconfig-with-authenticator:
        cluster-name: $CLUSTER_NAME
        aws-region: $AWS_DEFAULT_REGION
    - run:
        name: check aws configure
        command: |
          aws configure list
    - rj-package/install-kustomize
    - run:
        name: apply namespace.yaml
        working_directory: .circleci/kubernetes/base-system
        command: |
          if [ -f ${APPLY_TARGET}/namespace.yaml ]; then
            cd ${APPLY_TARGET}
            kubectl apply -f namespace.yaml
          else
            echo "not run."
          fi
    - run:
        name: apply redmine-admin
        working_directory: .circleci/kubernetes/base-system/admin
        command: |
          sed -i -e "s/_AWS_KEY_ID_/$AWS_ACCESS_KEY_ID_BLUE/g" config.yaml && \
          sed -i -e "s/_AWS_SECRET_KEY_/$AWS_SECRET_ACCESS_KEY_BLUE/g" config.yaml && \
          sed -i -e "s/_AWS_REGION_/$AWS_REGION_BLUE/g" config.yaml && \
          sed -i -e "s/_BLUE_SLACK_DEFAULT_TOKEN_/$BLUE_SLACK_DEFAULT_TOKEN/g" config.yaml && \
          sed -i -e "s/_BLUE_SLACK_DEFAULT_CHANNEL_/$BLUE_SLACK_DEFAULT_CHANNEL/g" config.yaml && \
          rm -rf config.yaml-e && \
          sed -i -e "s;_BLUE_DEPLOY_LICENCE_;$BLUE_DEPLOY_LICENCE;g" deployment.yml && \
          rm -rf deployment.yaml-e && \
          kubectl apply -k ./

develop-env-check:
  steps:
    - run:
        name: develop env check
        command: |
          echo $CLIENT_NAME
          if [[ "$CLIENT_NAME" == "develop" ]]; then
            echo "export AWS_ACCESS_KEY_ID=$(eval echo "\$AWS_ACCESS_KEY_ID_RHEMSLAB")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(eval echo "\$AWS_SECRET_ACCESS_KEY_RHEMSLAB")" >> $BASH_ENV
            echo "export AWS_DEFAULT_REGION=$(eval echo "\$AWS_DEFAULT_REGION_RHEMSLAB")" >> $BASH_ENV
            echo 'develop'
          else
            echo 'production'
          fi
